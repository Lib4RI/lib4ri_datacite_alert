<?php

/**
 * Implements hook_menu().
 */
function lib4ri_datacite_alert_menu() {
    $items = array();
    
    $items['admin/islandora/datacite'] = array(
        'title' => 'Datacite alert',
        'description' => 'Configuring Datacite alert',
        'access arguments' => array('administer datacite'),
    );
    $items['admin/islandora/datacite/config'] = array(
        'title' => 'General configuration',
        'description' => 'Configuring Datacite alert',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_form'),
        'access arguments' => array('administer datacite'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/datacite/batch'] = array(
        'title' => 'Get data',
        'description' => 'Manage list update',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_update_form'),
        'access arguments' => array('administer datacite'),
        'file' => 'includes/forms.inc',
    );
    
    $items['islandora/datacite/remarks'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_set_remarks_form'),
        'access arguments' => array('edit datacite entries'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/forms.inc',
    );

    $items['islandora/datacite/add'] = array(
        'page callback' => 'lib4ri_datacite_alert_add_data',
        'access arguments' => array('edit datacite entries'),
        'type' => MENU_CALLBACK,
//        'file' => 'lib4ri_datacite_alert.module',
    );

    $items['islandora/datacite/check'] = array(
        'page callback' => 'lib4ri_datacite_alert_check_status',
        'access arguments' => array('edit datacite entries'),
        'type' => MENU_CALLBACK,
        //        'file' => 'lib4ri_datacite_alert.module',
    );
    
    return $items;
}


/**
 * Implements hook_permission().
 */
function lib4ri_datacite_alert_permission() {
    return array(
        'access datacite data' => array(
            'title' => t('Access Datacite data'),
        ),
        'edit datacite entries' => array(
            'title' => t('Edit Datacite entries'),
        ),
        'administer datacite' => array(
            'title' => t('Administer Datacite data'),
        ),
    );
}


function lib4ri_datacite_alert_batch($params = NULL){
//    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/queries');
    $batch = array(
        'operations' => array(
            //            array('publication_DB_scopus_alert', array()),
        ),
        'finished' => 'lib4ri_datacite_batch_finished',
        'title' => t('Fetching Datacite info'),
        'init_message' => t('Starting...'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Example Batch has encountered an error.'),
        'file' => drupal_get_path('module', 'protein_db') . '/protein_db.module',
    );
    
    array_push($batch['operations'], array('lib4ri_datacite_alert_fetch', array($params)));
    
    batch_set($batch);
    
    // If this function was called from a form submit handler, stop here,
    // FAPI will handle calling batch_process().
    
    // If not called from a submit handler, add the following,
    // noting the url the user should be sent to once the batch
    // is finished.
    // IMPORTANT:
    // If you set a blank parameter, the batch_process() will cause an infinite loop
    
    batch_process();
}


function lib4ri_datacite_alert_fetch($params, &$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/classes');
    $upd = new DataCiteRetrieval();
    $upd->setStartDate($params[0])->setEndDate($params[1])->setDataQuery();
    $upd->update();
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;    
}


/**
 * Implements hook_views_api().
 */
function lib4ri_datacite_alert_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'lib4ri_datacite_alert') . '/views',
    );
}


function lib4ri_datacite_alert_add_data(){
    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/define');
    
    /* ADD to MODS */
    $datadoi = trim($_GET['DATADOI'],'_');
    $id = trim($_GET['ID'],'_');
    $pid = trim($_GET['PID'],'_');
    
        
    if(_lib4ri_datacite_alert_check_in_dora($pid,$datadoi)){
        drupal_set_message("Data package $datadoi already in DORA object $pid", 'warning');
        drupal_goto('admin/islandora/lib4ri_datacite_alert/datacite-alert');
    }
    
    _lib4ri_datacite_alert_add_to_dora($pid, $datadoi);
    
    
    if(_lib4ri_datacite_alert_check_in_dora($pid,$datadoi)){
        drupal_set_message("Data package $datadoi added to DORA object $pid", 'status');
        db_update(LIB4RI_DATACITE_ALERT_DATA_TABLE)->fields(array('status' => 'In DORA'))->condition('id', $id, '=')->execute();
    }
    else{
        drupal_set_message("Could not add package $datadoi to DORA object $pid", 'error');
    }
        
    /***************/
    drupal_goto('admin/islandora/lib4ri_datacite_alert/datacite-alert');
    
}

function lib4ri_datacite_alert_check_status(){
    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/define');
    
    /* ADD to MODS */
    $datadoi = trim($_GET['DATADOI'],'_');
    $id = trim($_GET['ID'],'_');
    $pid = trim($_GET['PID'],'_');
    $status = '';
    
    if(_lib4ri_datacite_alert_check_in_dora($pid,$datadoi)){
        drupal_set_message("Data package $datadoi is in DORA object $pid", 'status');
        $status = 'In DORA';
    }
    else{
        drupal_set_message("Data package $datadoi is NOT in DORA object $pid", 'warning');
    }
    
    db_update(LIB4RI_DATACITE_ALERT_DATA_TABLE)->fields(array('status' => $status))->condition('id', $id, '=')->execute();
    drupal_goto('admin/islandora/lib4ri_datacite_alert/datacite-alert');
}

function _lib4ri_datacite_alert_check_in_dora($pid, $datadoi){
    $object = islandora_object_load($pid);
    $mods = $object['MODS']->content;
    $dom = new DOMDocument();
    $dom->loadXML($object['MODS']->content);
    $xpath = new DOMXPath($dom);
    $xpath->registerNamespace('m', 'http://loc.gov/mods/v3');
    
    $mods_dois_a = array();
    $mods_dois = $xpath->query(variable_get('lib4ri_pub_db_resdata_section').variable_get('lib4ri_pub_db_resdata_tag'));
    foreach($mods_dois as $mods_doi){
        array_push($mods_dois_a, $mods_doi->nodeValue);
    }
    
    if((in_array('https://doi.org/'.$datadoi, $mods_dois_a)) || (in_array($datadoi, $mods_dois_a))){
        return true;
    }
    
    return false;
}

function _lib4ri_datacite_alert_add_to_dora($pid, $datadoi){
    $object = islandora_object_load($pid);
    $mods = $object['MODS']->content;
    $dom = new DOMDocument();
    $dom->loadXML($object['MODS']->content);
    $xpath = new DOMXPath($dom);
    $xpath->registerNamespace('m', 'http://loc.gov/mods/v3');
    
    $section = $xpath->query(variable_get('lib4ri_pub_db_resdata_section'))[0];
    if (is_null($section)){
        $mods_root = $xpath->query('//mods:mods')[0];
        $section = $dom->createElement(variable_get('lib4ri_pub_db_resdata_section_name'));
        $section->setAttribute(variable_get('lib4ri_pub_db_resdata_section_attribute_label'),variable_get('lib4ri_pub_db_resdata_section_attribute_value'));
        $mods_root->appendChild($section);
    }

    $data_uri = $dom->createElement(variable_get('lib4ri_pub_db_resdata_tag_name'));
    $data_uri->setAttribute(variable_get('lib4ri_pub_db_resdata_tag_attribute_label'),variable_get('lib4ri_pub_db_resdata_tag_attribute_value'));
    $data_uri->nodeValue = 'https://doi.org/'.$datadoi;
    $section->appendChild($data_uri);
    
    $object['MODS']->content = $dom->saveXML();
    
    return;
}