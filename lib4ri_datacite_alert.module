<?php

/**
 * Implements hook_menu().
 */
function lib4ri_datacite_alert_menu() {
    $items = array();
    
    $items['admin/islandora/datacite'] = array(
        'title' => 'Datacite alert',
        'description' => 'Configuring Datacite alert',
        'access arguments' => array('administer datacite'),
    );
    $items['admin/islandora/datacite/config'] = array(
        'title' => 'General configuration',
        'description' => 'Configuring Datacite alert',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_form'),
        'access arguments' => array('administer datacite'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/datacite/batch'] = array(
        'title' => 'Get data',
        'description' => 'Manage list update',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_update_form'),
        'access arguments' => array('administer datacite'),
        'file' => 'includes/forms.inc',
    );
    
    $items['islandora/datacite/remarks'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_datacite_alert_set_remarks_form'),
        'access arguments' => array('edit datacite entries'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/forms.inc',
    );
    
    return $items;
}


/**
 * Implements hook_permission().
 */
function lib4ri_datacite_alert_permission() {
    return array(
        'access datacite data' => array(
            'title' => t('Access Datacite data'),
        ),
        'edit datacite entries' => array(
            'title' => t('Edit Datacite entries'),
        ),
        'administer datacite' => array(
            'title' => t('Administer Datacite data'),
        ),
    );
}


function lib4ri_datacite_alert_batch($params = NULL){
//    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/queries');
    $batch = array(
        'operations' => array(
            //            array('publication_DB_scopus_alert', array()),
        ),
        'finished' => 'lib4ri_datacite_batch_finished',
        'title' => t('Fetching Datacite info'),
        'init_message' => t('Starting...'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Example Batch has encountered an error.'),
        'file' => drupal_get_path('module', 'protein_db') . '/protein_db.module',
    );
    
    array_push($batch['operations'], array('lib4ri_datacite_alert_fetch', array()));
    
    batch_set($batch);
    
    // If this function was called from a form submit handler, stop here,
    // FAPI will handle calling batch_process().
    
    // If not called from a submit handler, add the following,
    // noting the url the user should be sent to once the batch
    // is finished.
    // IMPORTANT:
    // If you set a blank parameter, the batch_process() will cause an infinite loop
    
    batch_process();
}


function lib4ri_datacite_alert_fetch(&$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'lib4ri_datacite_alert', 'includes/classes');
    $upd = new DataCiteRetrieval();
    $upd->update();
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;    
}


/**
 * Implements hook_views_api().
 */
function lib4ri_datacite_alert_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'lib4ri_datacite_alert') . '/views',
    );
}
